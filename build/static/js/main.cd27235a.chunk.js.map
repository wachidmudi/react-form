{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["enhancedReducer","state","updateArg","constructor","Function","Object","has","_path","_value","produce","draft","set","initialState","title","firstName","lastName","position","company","adresses","zipCode","place","country","code","phone","email","isAccept","useFetch","url","useState","data","setData","loading","setLoading","useEffect","a","async","fetch","response","json","fetchData","App","React","useReducer","updateState","updateForm","useCallback","target","value","name","type","updatePath","split","length","key","prevState","console","log","Fragment","className","onSubmit","e","preventDefault","onChange","disabled","map","item","placeholder","address","id","defaultChecked","htmlFor","data-toggle","data-target","tabIndex","role","data-dismiss","aria-label","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd27235a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport produce from 'immer';\nimport { set, has } from 'lodash';\nimport './App.css';\n\nconst enhancedReducer = (state, updateArg) => {\n  // check if the type of update argument is a callback function\n  if (updateArg.constructor === Function) {\n    return { ...state, ...updateArg(state) };\n  }\n\n  // if the type of update argument is an object\n  if (updateArg.constructor === Object) {\n    // does the update object have _path and _value as it's keys\n    // if yes then use them to update deep object values\n    if (has(updateArg, '_path') && has(updateArg, '_value')) {\n      const { _path, _value } = updateArg;\n\n      return produce(state, draft => {\n        set(draft, _path, _value);\n      });\n    } else {\n      return { ...state, ...updateArg };\n    }\n  }\n};\n\nconst initialState = {\n  title: '',\n  firstName: '',\n  lastName: '',\n  position: '',\n  company: '',\n  adresses: '',\n  zipCode: '',\n  place: '',\n  country: '',\n  code: '',\n  phone: '',\n  email: '',\n  isAccept: false\n};\n\nconst useFetch = url => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return { loading, data };\n};\n\nconst App = () => {\n  const [state, updateState] = React.useReducer(enhancedReducer, initialState);\n\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\n    const updatePath = name.split('.');\n\n    // if the input is a checkbox then use callback function to update\n    // the toggle state based on previous state\n    if (type === 'checkbox') {\n      updateState(prevState => ({\n        [name]: !prevState[name]\n      }));\n\n      return;\n    }\n\n    // if we have to update the root level nodes in the form\n    if (updatePath.length === 1) {\n      const [key] = updatePath;\n\n      updateState({\n        [key]: value\n      });\n    }\n\n    // if we have to update nested nodes in the form object\n    // use _path and _value to update them.\n    if (updatePath.length === 2) {\n      updateState({\n        _path: updatePath,\n        _value: value\n      });\n    }\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(state);\n  };\n\n  const country = useFetch('https://restcountries.eu/rest/v2/all');\n  const title = ['Businessman', 'Secretary', 'Reporter'];\n  const position = ['Director', 'Employee', 'Manager'];\n  console.log(country);\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"row no-gutter\">\n          <div className=\"col my-5\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"row no-gutter\">\n                <div className=\"form-group col col-md-6 col-12 bg-light p-4 form-rounded-1\">\n                  <h2 className=\"mb-4 text-primary\">General Information</h2>\n\n                  <div className=\"form-group\">\n                    <select\n                      className=\"custom-select\"\n                      onChange={updateForm}\n                      value={state.title}\n                      name=\"title\"\n                    >\n                      <option value=\"\" disabled>\n                        Title\n                      </option>\n                      {title.map((item, key) => (\n                        <option key={key} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"form-group col\">\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"firstName\"\n                        placeholder=\"First Name\"\n                        onChange={updateForm}\n                        value={state.firstName}\n                      />\n                    </div>\n                    <div className=\"form-group col\">\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"lastName\"\n                        placeholder=\"Last Name\"\n                        onChange={updateForm}\n                        value={state.lastName}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <select\n                      className=\"custom-select\"\n                      onChange={updateForm}\n                      value={state.position}\n                      name=\"position\"\n                    >\n                      <option value=\"\" disabled>\n                        Position\n                      </option>\n                      {position.map((item, key) => (\n                        <option key={key} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"company\"\n                      placeholder=\"Company\"\n                      onChange={updateForm}\n                      value={state.company}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"form-group col col-md-6 col-12 bg-warning p-4 form-rounded-2\">\n                  <h2 className=\"mb-4 text-white\">Contact Details</h2>\n\n                  <div className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"adresses\"\n                      placeholder=\"Adresses\"\n                      onChange={updateForm}\n                      value={state.address}\n                    />\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"form-group col\">\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"zipCode\"\n                        placeholder=\"Zip Code\"\n                        onChange={updateForm}\n                        value={state.zipCode}\n                      />\n                    </div>\n                    <div className=\"form-group col\">\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"place\"\n                        placeholder=\"Place\"\n                        onChange={updateForm}\n                        value={state.place}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <select\n                      className=\"custom-select\"\n                      value={state.country}\n                      onChange={updateForm}\n                      name=\"country\"\n                    >\n                      <option value=\"\" disabled>\n                        Country\n                      </option>\n                      {country.loading ? (\n                        <option value=\"\">Loading... </option>\n                      ) : (\n                        country.data.map((item, key) => (\n                          <option key={key} value={item.name}>\n                            {item.name}\n                          </option>\n                        ))\n                      )}\n                    </select>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"form-group col\">\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"code\"\n                        placeholder=\"Code *\"\n                        onChange={updateForm}\n                        value={state.code}\n                      />\n                    </div>\n                    <div className=\"form-group col\">\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"phone\"\n                        placeholder=\"Phone Number\"\n                        onChange={updateForm}\n                        value={state.phone}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"email\"\n                      placeholder=\"Your Email\"\n                      onChange={updateForm}\n                      value={state.email}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <div className=\"custom-control custom-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"custom-control-input\"\n                        id=\"customCheck1\"\n                        name=\"isAccept\"\n                        onChange={updateForm}\n                        defaultChecked={state.isAccept}\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor=\"customCheck1\"\n                      >\n                        <small>\n                          I do accept the{' '}\n                          <b>\n                            <i>Term and Conditions</i>\n                          </b>{' '}\n                          of your site\n                        </small>\n                      </label>\n                    </div>\n                  </div>\n                  <input\n                    className=\"btn btn-light rounded\"\n                    type=\"submit\"\n                    value=\"Submit\"\n                    data-toggle=\"modal\"\n                    data-target=\"#confirmModal\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      <div id=\"confirmModal\" className=\"modal\" tabIndex={-1} role=\"dialog\">\n        <div className=\"modal-dialog\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\">Register Confirmation</h5>\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n              >\n                <span aria-hidden=\"true\">×</span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <h6>Title: {state.title}</h6>\n              <h6>First Name: {state.firstName}</h6>\n              <h6>Last Name: {state.lastName}</h6>\n              <h6>Position: {state.position}</h6>\n              <h6>Company: {state.company}</h6>\n              <h6>Place: {state.place}</h6>\n              <h6>Country: {state.country}</h6>\n              <h6>E-mail: {state.email}</h6>\n              <h6>Accept: {state.isAccept ? 'Accepted' : 'Declined'}</h6>\n            </div>\n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                data-dismiss=\"modal\"\n              >\n                OK\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}